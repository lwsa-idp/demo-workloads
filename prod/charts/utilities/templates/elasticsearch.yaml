apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: quickstart
spec:
  version: 8.15.2
  auth:
    fileRealm:
      - secretName: quickstart-external-user
    roles:
      - secretName: quickstart-external-user-role
  secureSettings:
    - secretName: {{ $.Release.Name }}-elastic-backup-creds
  nodeSets:
    - name: master
      config:
        node.roles: ["master"]
      count: 3
      # https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-managing-compute-resources.html#k8s-compute-resources-elasticsearch
      podTemplate:
        spec:
          containers:
            - name: elasticsearch
              resources:
                requests:
                  memory: 4Gi
                  cpu: 300m
                limits:
                  memory: 4Gi
                  cpu: '2'
      volumeClaimTemplates:
        - metadata:
            name: elasticsearch-data # Do not change this name unless you set up a volume mount for the data path.
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 80Gi
            storageClassName: {{ $.Values.global.dbStorageClassName }}
    - name: nodes
      config:
        # Como na AWS OpenSearch, atribuimos todos os roles além de master
        node.roles: ["data", "ingest", "remote_cluster_client", "ml", "transform"]
      count: 3
      # https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-managing-compute-resources.html#k8s-compute-resources-elasticsearch
      podTemplate:
        spec:
          containers:
            - name: elasticsearch
              resources:
                requests:
                  memory: 4Gi
                  cpu: 300m
                limits:
                  memory: 4Gi
                  cpu: '2'
      volumeClaimTemplates:
        - metadata:
            name: elasticsearch-data # Do not change this name unless you set up a volume mount for the data path.
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 80Gi
            storageClassName: {{ $.Values.global.dbStorageClassName }}
---
# TODO: sync-wave Kibana após ElasticSearch
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: quickstart
spec:
  version: 8.15.2
  count: 1
  elasticsearchRef:
    name: quickstart
  http:
    tls:
      selfSignedCertificate:
        disabled: true
  podTemplate:
    spec:
      containers:
        - name: kibana
          resources:
            requests:
              memory: 4Gi
              cpu: 300m
            limits:
              memory: 4Gi
              cpu: '2'
---
# Já visto em forums que Kibana procura acessar metadados em 169.254.x.x, o que não faz sentido
# Tentativas aparecerão como dropped no Grafana. Aceitaremos.
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: kibana
spec:
  egress:
  - {}
  - toFQDNs:
      - matchPattern: '*.elastic.co'
    toPorts:
      - ports:
          - port: "443"
            protocol: TCP
  endpointSelector:
    matchLabels:
      kibana.k8s.elastic.co/name: quickstart
  ingress:
  - {}
---
# TODO: flag expose ElasticSearch
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: quickstart
  annotations:
    {{- toYaml $.Values.global.ingress.issuerAnnotations | nindent 4 }}
{{/*

  {{- if .sourceRanges }}
    nginx.ingress.kubernetes.io/whitelist-source-range: '{{ .sourceRanges | join "," }}'
  {{- end }}

*/}}
spec:
  rules:
  - host: {{ $.Release.Namespace }}-quickstart-kb.{{ $.Values.global.clusterDomain }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: quickstart-kb-http
            port:
              number: 5601
  - host: {{ $.Release.Namespace }}-quickstart-kb.{{ $.Values.global.globalDomain }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: quickstart-kb-http
            port:
              number: 5601
  ingressClassName: {{ $.Values.global.ingress.ingressClassName }}
---
# https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-users-and-roles.html
# IMPORTANTE: user e role criados desta forma não aparecem no dashboard do Kibana, mas funcionam normalmente.
# https://github.com/elastic/cloud-on-k8s/issues/4738
kind: Secret
apiVersion: v1
metadata:
  name: quickstart-external-user-role
stringData:
  roles.yml: |-
    external-user-role:
      cluster:
        - 'monitor'
      indices:
        - names:
            - '*'
          privileges:
            - 'all'
      applications:
        - application: 'kibana-.kibana'
          privileges:
            - 'all'
          resources:
            - '*'
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: quickstart-external-user
spec:
  refreshInterval: "0s" # não modifica depois de gerado
  target:
    name: quickstart-external-user
    template:
      engineVersion: v2
      type: kubernetes.io/basic-auth
      data:
        username: external-user
        password: "{{ `{{ .password }}` }}" 
        roles: external-user-role
  dataFrom:
    - sourceRef:
        generatorRef:
          apiVersion: generators.external-secrets.io/v1alpha1
          kind: Password
          name: "password-generator"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: quickstart-create-backup-repo
  annotations:
    argocd.argoproj.io/sync-wave: "50"
spec:
  template:
    metadata:
      name: create-backup-repo
    spec:
      restartPolicy: OnFailure
      containers:
      - name: create-backup-repo
        image: curlimages/curl
        command: ["/bin/sh", "-c"]
        args:
        - |
          set -euox pipefail

          curl -X PUT "https://quickstart-es-http:9200/_snapshot/backup" \
            -k -H "Content-Type: application/json" \
            -u "elastic:${ELASTIC_PASSWORD}" \
            -d '{
              "type": "s3",
              "settings": {
                "client": "backup",
                "bucket": "{{ $.Values.global.backup.bucket }}",
                "base_path": "{{ printf "elasticsearch/%s-%s-%s" $.Release.Namespace $.Release.Name "quickstart" }}",
                "endpoint": "{{ $.Values.global.backup.endpoint }}",
                "region": "{{ $.Values.global.backup.region }}",
                "path_style_access": true,
                "disable_chunked_encoding": true
              }
            }'

          sleep 3

          curl -X PUT "https://quickstart-es-http:9200/_slm/policy/daily-snapshots" \
            -k -H "Content-Type: application/json" \
            -u "elastic:${ELASTIC_PASSWORD}" \
            -d '{
              "schedule": "0 30 7 * * ?", 
              "name": "<daily-snap-{now/d}>", 
              "repository": "backup", 
              "config": { 
                "indices": ["*"], 
                "ignore_unavailable": false,
                "include_global_state": true
              },
              "retention": { 
                "expire_after": "30d", 
                "min_count": 3, 
                "max_count": 10 
              }
              }
            }'

          sleep 3

          curl -X PUT "https://quickstart-es-http:9200/_slm/policy/hourly-snapshots" \
            -k -H "Content-Type: application/json" \
            -u "elastic:${ELASTIC_PASSWORD}" \
            -d '{
              "schedule": "0 20 * * * ?", 
              "name": "<hourly-snap-{now/d}>", 
              "repository": "backup", 
              "config": { 
                "indices": ["*"], 
                "ignore_unavailable": false,
                "include_global_state": true
              },
              "retention": { 
                "expire_after": "30d", 
                "min_count": 3, 
                "max_count": 12 
              }
              }
            }'
        env:
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: quickstart-es-elastic-user
                key: elastic
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $.Release.Name }}-elastic-backup-creds
  annotations:
    # credenciais precedem recovery
    argocd.argoproj.io/sync-wave: "-150"
spec:
  refreshInterval: 5m
  secretStoreRef:
    kind: ClusterSecretStore
    name: {{ $.Values.global.externalSecrets.clusterSecretStoreName }}
  target:
    name: {{ $.Release.Name }}-elastic-backup-creds
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        s3.client.backup.access_key: "{{ `{{ .AWS_ACCESS_KEY_ID }}` }}"
        s3.client.backup.secret_key: "{{ `{{ .AWS_SECRET_ACCESS_KEY }}` }}"
  dataFrom:
  - extract:
      key: {{ $.Values.global.backup.secret }}